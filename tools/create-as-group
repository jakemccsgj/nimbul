#!/usr/bin/ruby
$:.unshift File.join(File.dirname(__FILE__))
require 'AWS/AS'
require 'basic_configuration'
require 'aws_context'
require 'pp'

if ARGV[0] == '-?' || ARGV.size < 5 then
   puts "usage: create-as-group group-name launch-config load-balancer-1[,load-balancer-2[,...]] zone min_size [max_size]"
   exit 1
end
options = {}
options[:auto_scaling_group_name]=ARGV[0]
options[:launch_configuration_name]=ARGV[1]

options[:load_balancer_names] = []
ARGV[2].split(',').each do |lb_name|
    options[:load_balancer_names] << lb_name
end

options[:availability_zones] = []
ARGV[3].split(',').each do |zone|
    options[:availability_zones] << zone
end

options[:min_size] = ARGV[4]
options[:max_size] = ARGV[5] || options[:min_size]

Signal.trap("INT") do
  exit 2
end

config = BasicConfiguration.new
as = AwsContext.instance.as(*config.keys)
elb = AwsContext.instance.elb(*config.keys)

# verifying launch configuration
begin
   lcs = as.describe_launch_configurations
   lc_names = lcs.collect{ |lc| lc.launch_configuration_name }
   unless lc_names.include? options[:launch_configuration_name]
      puts "error #{options[:launch_configuration_name]} is not a valid launch configuration"
      exit 1         
   end
rescue
   puts "error retrieving list of launch configurations #{$!}"
   exit 1
end

# verifying load balancers
begin
   lbs = elb.describe_load_balancers
   lb_names = lbs.collect{ |lb| lb.load_balancer_name }
   options[:load_balancer_names].each do |lb_name|
      unless lb_names.include? lb_name
         puts "error #{lb_name} is not a valid load balancer"
         exit 1         
      end
   end
rescue
   puts "error retrieving list of balancers #{$!}"
   exit 1
end

begin
  result = as.create_auto_scaling_group(options)
  puts "created auto scaling group #{options[:auto_scaling_group_name]}"
rescue
  puts "error #{$!}"
  exit 1
end
