#!/usr/bin/ruby
$:.unshift File.join(File.dirname(__FILE__))
#require 'AWS/AS'
require 'basic_configuration'
require 'aws_context'
require 'pp'

if ARGV[0] == '-?' || ARGV.size < 2 then
   puts "usage: create-launch-config config-name image_id [instance_type [group1,group2 [volume1:device1,volume2:device2]]]"
   exit 1
end
options = {}
options[:launch_configuration_name]=ARGV[0]
options[:image_id]=ARGV[1]
options[:instance_type]=ARGV[2] || 'm1.small'

options[:security_groups] = []
ARGV[3] ||= ''
ARGV[3].split(',').each do |group|
   options[:security_groups] << group
end

options[:block_device_mappings] = []
ARGV[4] ||= ''
ARGV[4].split(',').each do |mapping|
   m = mapping.split(':')
   options[:block_device_mappings] << {
      :virtual_name => m[0],
      :device_name => m[1],
   }
end

Signal.trap("INT") do
  exit 2
end

config = BasicConfiguration.new
as = AwsContext.instance.as(*config.keys)
ec2 = AwsContext.instance.ec2(*config.keys)

image_id = options[:image_id]
attr='launchPermission'
begin
    res = ec2.describe_image_attribute(image_id, attr)
    if res.nil? or res[:id].nil?
        puts "error #{image_id} is not a valid image id"
        exit 1
    end
rescue
    puts "error failed to verify image id #{image_id}: #{$!}"
    exit 1
end

begin
    groups = ec2.describe_security_groups.collect{ |g| g[:name] }
    options[:security_groups].each do |name|
        unless groups.include?(name)
            puts "error #{name} is not a valid security group"
            exit 1
        end
    end
rescue
    puts "error failed to verify security groups: #{$!}"
    exit 1
end
    
begin
  lc = as.create_launch_configuration(options)
  puts "created launch configuration #{options[:launch_configuration_name]}"
rescue
  puts "error #{$!} #{options[:launch_configuration_name]}"
  exit 1
end
