#!/usr/bin/ruby
$:.unshift File.join(File.dirname(__FILE__))
require 'AWS/AS'
require 'basic_configuration'
require 'aws_context'
require 'pp'

if ARGV[0] == '-?' || ARGV[0] == '--help' || ARGV[0] == '-h'
    usage = 'usage: as-describe-launch-configs [LaunchConfigurationName [LaunchConfigurationName...]] [--max-records value] [--long]'
    about = 'Describe the specified launch configurations if they exist.'
    puts usage
    puts about
    exit 1
end

Signal.trap("INT") do
    exit 2
end

long = false
filters = []
options = {}

while ARGV.size > 0
    if ARGV[0] == '--max-records'
        ARGV.shift
        options[:max_records] = ARGV.shift
    elsif ARGV[0] == '--long'
        ARGV.shift
		long = true
    else
	    filters = ARGV.collect{ |v| Regexp.new(ARGV.shift) }
    end
end

filters << Regexp.new('.*') if filters.empty?

config = BasicConfiguration.new
as = AwsContext.instance.as(*config.keys)
begin
    configs = as.describe_launch_configurations(options)
    configs.each do |config|
        unless filters.detect{ |f| config.launch_configuration_name =~ f }.nil?
            puts "#{config.launch_configuration_name} #{config.image_id} #{config.instance_type} #{config.key_name}"
            puts "    groups #{config.security_groups.join(',')}" if !config.security_groups.nil? and config.security_groups.size > 0
            puts "    balancers #{config.load_balancer_names.join(',')}" if !config.load_balancer_names.nil? and config.load_balancer_names.size > 0
            unless config.block_device_mappings.nil?
                config.block_device_mappings.each do |m|
                    puts "    device #{m.virtual_name} #{m.device_name}"
                end
            end
            if long
	            puts "    created #{config.created_time}"
                puts "    kernel #{config.kernel_id}"
                puts "    ramdisk #{config.ramdisk_id}"
                puts "    user_data_begins --------------"
                puts config.user_data
                puts "    user_data_ends --------------"
            end
        end
    end
rescue
    puts "error: #{$!}"
    exit 1
end

exit 0
