#!/usr/bin/ruby
$:.unshift File.join(File.dirname(__FILE__))
require 'AWS/EC2'
require 'basic_configuration'
require 'aws_context'
require 'pp'

# Start an instance.
# An instance id (ami-number) or instance name is required.
# Optionally, a security group may be given.
# If no group is given, it uses to one given in the environment, 
#  or "default".

config = BasicConfiguration.new
keyfile = config.aws[:aws_key]
if keyfile.nil? 
  puts "Keyfile must be specified in AWS_KEY environment variabe or in config.ini."
  exit 1
end
group = config.aws[:aws_group]
group = 'default' if group.nil? 

if ARGV[0] == '-?' || ARGV.size < 1
  puts "usage: start-instance [--large] image-id [security-group]"
  puts "usage: start-instance [--large] image-name [security-group]"
  puts "usage: start-instance instance-id[,instance-id[,...]]"
  exit 1
end

# Check for large instance: 
instance_size = nil
if ARGV[0] == "--large"
  instance_size = ARGV.shift  
end

name=ARGV[0]
group = ARGV[1] if ARGV.size > 1

opts = {:key_name => File.basename(keyfile, ".*"), :security_groups => [ group ]}
opts[:instance_type] = 'm1.large' if instance_size == "--large"


Signal.trap("INT") do
  exit 2
end

ec2 = AwsContext.instance.ec2(*config.keys)
begin
  if name =~ /^ami-/
    instances = ec2.run_instances(name, 1, 1, opts)
  elsif name =~ /^i-/
    instance_ids = name.split(',')
    instances = ec2.start_instances(instance_ids)
  else
    images = ec2.describe_images
    #pp images
    image_ids = [];
    n = 0;
    filter=Regexp.new(name)
    im = []
    images.each do |i|
      if i[:location] =~ filter
        im << i
      end
    end
    if im.size == 1
      instances = ec2.run_instances(im[0][:id], 1, 1, opts)
    elsif im.size > 1
      im.each do |i|
        n += 1
        puts "#{n}) #{i[:id]} #{i[:location]}"
        image_ids << i[:id]
      end
      line = STDIN.gets
      idx = line.to_i - 1
      if idx >= 0 && idx < image_ids.size
        instances = ec2.run_instances(image_ids[idx], 1, 1, opts)
      end
    end
  end
  #pp instances
  unless instances.nil? 
    if instances.is_a?(Array)
      instances.each {|r| puts "#{r[:id]} #{r[:state]}"}
    else
      instances[:instances].each {|o| puts "#{o[:id]}"}
    end
  end
rescue
  puts "not started #{name} #{$!}"
  exit 1
end

