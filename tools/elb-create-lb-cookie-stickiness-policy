#!/usr/bin/ruby
$:.unshift File.join(File.dirname(__FILE__))
require 'basic_configuration'
require 'aws_context'
require 'pp'

usage = <<"eos"
SYNOPSIS
    elb-create-lb-cookie-stickiness-policy
      LoadBalancerName  --policy-name  value [--expiration-period  value ]
eos

help = <<"eos"

DESCRIPTION
      Create a new stickiness policy for a LoadBalancer, whereby the LoadBalancer
    generates the cookie and inserts it into the request. The LoadBalancer will
    then honor this cookie in routing decisions and route requests to the same
    instance.

ARGUMENTS
    LoadBalancerName
      Name of the LoadBalancer. You can also set this value using "--lb".
      Required.

    -p, --policy-name VALUE
      Name of the policy to enable.
      Required.

    -e, --expiration-period VALUE
      Time in seconds for which the cookie is set to expire after its generation.
eos

if ARGV[0] == '--help' || ARGV[0] == '-h' || ARGV[0] == '-?'
  puts usage
  puts help
  exit 0
end

if ARGV.size < 3
  puts usage
  puts 'For more information and a full list of options, run "elb-create-lb-cookie-stickiness-policy --help"'
  exit 1
end

Signal.trap("INT") do
  exit 2
end

options = {}
unless ARGV[0] =~ Regexp.new('^-')
  options[:load_balancer_name] = ARGV.shift
end

while ARGV.size > 0
  if ARGV[0] == '--lb'
    unless options[:load_balancer_name].nil?
      puts "LoadBalancerName is already defined"
      puts usage
      exit 1
    end
    ARGV.shift
    options[:load_balancer_name] = ARGV.shift
  end
  if ARGV[0] == '--policy-name' || ARGV[0] == '-p'
    ARGV.shift
    options[:policy_name] = ARGV.shift
  end
  if ARGV[0] == '--expiration-period' || ARGV[0] == '-e'
    ARGV.shift
    options[:expiration_period] = ARGV.shift
  end
end

config = BasicConfiguration.new
elb = AwsContext.instance.elb(*config.keys)
  
begin
  result = elb.create_l_b_cookie_stickiness_policy(options)
  puts "policy created"
rescue
  puts "error: #{$!}"
  exit 1
end

exit 0
