#!/usr/bin/ruby
$:.unshift File.join(File.dirname(__FILE__))
#require 'AWS/AS'
require 'basic_configuration'
require 'aws_context'
require 'pp'

if ARGV[0] == '-?' || ARGV[0] == '--help' || ARGV[0] == '-h' || ARGV.size < 3
    usage = 'usage: as-create-launch-config LaunchConfigurationName --image-id value [--instance-type value] [--block-device-mapping "key1=value,key2=value2..."] [--kernel value] [--key value] [--ramdisk value] [--group value[,value...]] [--user-data value] [--user-data-file value]'
    about = 'Create a new launch config with specified attributes.'
    puts usage
    puts about
    exit 1
end

Signal.trap("INT") do
    exit 2
end

options = {}
options[:launch_configuration_name] = ARGV.shift

while ARGV.size > 0
    if ARGV[0] == '--image-id'
        ARGV.shift
        options[:image_id] = ARGV.shift
    end
    if ARGV[0] == '--instance-type'
        ARGV.shift
        options[:instance_type] = ARGV.shift
    end
    if ARGV[0] == '--block-device-mapping'
        ARGV.shift
        options[:block_device_mappings] = []
        ARGV.shift.split(',').each do |mapping|
            m = mapping.split('=')
            options[:block_device_mappings] << {
                :virtual_name => m[0],
                :device_name => m[1],
            }
        end
    end
    if ARGV[0] == '--kernel'
        ARGV.shift
        options[:kernel_id] = ARGV.shift
    end
    if ARGV[0] == '--key'
        ARGV.shift
        options[:key_name] = ARGV.shift
    end
    if ARGV[0] == '--ramdisk'
        ARGV.shift
        options[:ramdisk_id] = ARGV.shift
    end
    if ARGV[0] == '--group'
        ARGV.shift
        options[:security_groups] = ARGV.shift.split(',')
    end
    if ARGV[0] == '--user-data'
        ARGV.shift
        options[:user_data] = ARGV.shift
    end
end

options[:instance_type] ||= 'm1.small'

config = BasicConfiguration.new
as = AwsContext.instance.as(*config.keys)
    
begin
    lc = as.create_launch_configuration(options)
rescue
    puts "error: #{$!}"
    exit 1
end

exit 0
