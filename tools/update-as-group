#!/usr/bin/ruby
$:.unshift File.join(File.dirname(__FILE__))
require 'AWS/AS'
require 'basic_configuration'
require 'aws_context'
require 'pp'

if ARGV[0] == '-?' || ARGV.size < 5 then
   puts "usage: update-as-group group-name launch-config zone1[,zone2[,zone3...]] cooldown min_size [max_size]"
   exit 1
end
options = {}
options[:auto_scaling_group_name]=ARGV[0]
options[:launch_configuration_name]=ARGV[1]

options[:availability_zones] = []
ARGV[2].split(',').each do |zone|
    options[:availability_zones] << zone
end

options[:cooldown] = ARGV[3]
options[:min_size] = ARGV[4]
options[:max_size] = ARGV[5] || options[:min_size]

Signal.trap("INT") do
  exit 2
end

config = BasicConfiguration.new
as = AwsContext.instance.as(*config.keys)

# verifying launch configuration
begin
   lcs = as.describe_launch_configurations({})
   lc_names = lcs.collect{ |lc| lc.launch_configuration_name }
   unless lc_names.include? options[:launch_configuration_name]
      puts "error #{options[:launch_configuration_name]} is not a valid launch configuration"
      exit 1         
   end
rescue
   puts "error retrieving list of launch configurations #{$!}"
   exit 1
end

begin
  result = as.update_auto_scaling_group(options)
  puts "updated auto scaling group #{options[:auto_scaling_group_name]}"
rescue
  puts "error #{$!}"
  exit 1
end
