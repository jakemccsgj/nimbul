#!/usr/bin/ruby
$:.unshift File.join(File.dirname(__FILE__))
require 'basic_configuration'
require 'aws_context'
require 'pp'

usage = <<"eos"
SYNOPSIS
    elb-set-lb-policies-of-listener
      LoadBalancerName --lb-port value --policy-names value[,value...]
eos

help = <<"eos"

DESCRIPTION
      Sets the LoadBalancer policies for a specified LoadBalancer and port. All
    previously set policies for the port are removed. Specifying no values for
    the --policy-names option will unset all currently active policies for the
    LoadBalancer. The list of policies is order-dependent, and some policies are
    incompatible with each other. Please refer to service documentation for
    allowable combinations of LoadBalancer policies.

ARGUMENTS
    LoadBalancerName
      Name of the LoadBalancer. You can also set this value using "--lb".
      Required.

    -l, --lb-port VALUE
      Port on LoadBalancer for which to set the policies.
      Required.

    -p, --policy-names VALUE1,VALUE2,VALUE3...
      List of PolicyNames to enable for this listener.
      Required.
eos

if ARGV[0] == '--help' || ARGV[0] == '-h' || ARGV[0] == '-?'
  puts usage
  puts help
  exit 0
end

if ARGV.size < 5
  puts usage
  puts 'For more information and a full list of options, run "elb-set-lb-policies-of-listener --help"'
  exit 1
end

Signal.trap("INT") do
  exit 2
end

options = {}
unless ARGV[0] =~ Regexp.new('^-')
  options[:load_balancer_name] = ARGV.shift
end

while ARGV.size > 0
  if ARGV[0] == '--lb'
    unless options[:load_balancer_name].nil?
      puts "LoadBalancerName is already defined"
      puts usage
      exit 1
    end
    ARGV.shift
    options[:load_balancer_name] = ARGV.shift
  end
  if ARGV[0] == '--lb-port' || ARGV[0] == '-l'
    ARGV.shift
    options[:load_balancer_port] = ARGV.shift
  end
  if ARGV[0] == '--policy-names' || ARGV[0] == '-p'
    ARGV.shift
    options[:policy_names] = ARGV.shift.split(',')
  end
end

config = BasicConfiguration.new
elb = AwsContext.instance.elb(*config.keys)
  
begin
  result = elb.create_elb_policy(options)
  puts "policy set"
rescue
  puts "error: #{$!}"
  exit 1
end

exit 0
