#!/usr/bin/ruby
$:.unshift File.join(File.dirname(__FILE__))
require 'AWS/S3'
require 'basic_configuration'
require 'aws_context'
require 'pp'
	
# Add object attributes
if ARGV[0] == '-?' || ARGV.size < 3 then
  puts "usage: make-object-available bucket (key|/) grantee [READ|WRITE|READ_ACP|WRITE_ACP|FULL_CONTROL]"
  puts "default value for permission is READ"
  exit 1
end
bucket = ARGV[0]
key = ARGV[1] == '/' ? '' : ARGV[1]
grantee = ARGV[2]
permission = ARGV[3] || 'READ'

Signal.trap("INT") do
  exit 2
end

def testme
  puts "!!!"
end

config = BasicConfiguration.new
s3 = AwsContext.instance.s3(*config.keys)
begin
  current_acl = s3.get_acl(bucket, key)
  pp current_acl
  owner_id = current_acl[:owner_id]
  current_grants = current_acl[:grants]
  grants = []
  p_exists = false
  current_grants.each do |hash|
    current_grantee = hash[:grantee]
    c_display_name = current_grantee[:display_name]
    c_id = current_grantee[:id]
    c_permission = hash[:permission]
    grants << { c_id => c_permission }
    p_exists = p_exists or ( c_id == grantee and c_permission == permission ) 
    puts "#{c_permission} #{c_display_name} #{c_id}"
  end
  grants << { grantee => permission }
#  s3.set_acl(owner_id, bucket, key, grants) unless p_exists
  puts "granted #{permission} to #{}"
  testme
rescue
  puts "error granting #{permission} on #{bucket}/#{key} to #{grantee}: #{$!}"
  exit 1
end

exit 0
