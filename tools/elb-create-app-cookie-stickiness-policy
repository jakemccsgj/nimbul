#!/usr/bin/ruby
$:.unshift File.join(File.dirname(__FILE__))
require 'basic_configuration'
require 'aws_context'
require 'pp'

usage = <<"eos"
SYNOPSIS
    elb-create-app-cookie-stickiness-policy
      LoadBalancerName --cookie-name value --policy-name value
eos

help = <<"eos"

DESCRIPTION
      Create a new stickiness policy for a LoadBalancer, whereby the server
    application generates the cookie and inserts it into the response. The
    LoadBalancer will then honor this cookie in routing decisions and route
    requests to the same instance.

ARGUMENTS
    LoadBalancerName
      Name of the LoadBalancer. You can also set this value using "--lb".
      Required.

    -c, --cookie-name VALUE
      The name of the application generated cookie that the LoadBalancer should honor in routing decisions.
      Required.

    -p, --policy-name VALUE
      Name of the policy to enable.
      Required.
eos

if ARGV[0] == '--help' || ARGV[0] == '-h' || ARGV[0] == '-?'
  puts usage
  puts help
  exit 0
end

if ARGV.size < 5
  puts usage
  puts 'For more information and a full list of options, run "elb-create-app-cookie-stickiness-policy --help"'
  exit 1
end

Signal.trap("INT") do
  exit 2
end

options = {}
unless ARGV[0] =~ Regexp.new('^-')
  options[:load_balancer_name] = ARGV.shift
end

while ARGV.size > 0
  if ARGV[0] == '--lb'
    unless options[:load_balancer_name].nil?
      puts "LoadBalancerName is already defined"
      puts usage
      exit 1
    end
    ARGV.shift
    options[:load_balancer_name] = ARGV.shift
  end
  if ARGV[0] == '--cookie-name' || ARGV[0] == '-c'
    ARGV.shift
    options[:cookie_name] = ARGV.shift
  end
  if ARGV[0] == '--policy-name' || ARGV[0] == '-p'
    ARGV.shift
    options[:policy_name] = ARGV.shift
  end
end

config = BasicConfiguration.new
elb = AwsContext.instance.elb(*config.keys)
  
begin
  result = elb.create_app_cookie_stickiness_policy(options)
  puts "policy created"
rescue
  puts "error: #{$!}"
  exit 1
end

exit 0
