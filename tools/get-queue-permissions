#!/usr/bin/ruby
$:.unshift File.join(File.dirname(__FILE__))
require 'AWS/SQS'
require 'basic_configuration'
require 'aws_context'
require 'pp'

#  Modify the given queue attributes.
#  For now, the only one is the visibility timeout.

if ARGV[0] == '-?' || ARGV.size != 1 then
	puts "usage: get-queue-permissions queue [account_id]"
	exit 1
end

name=ARGV[0]
account=(ARGV[1] rescue nil) 

Signal.trap("INT") { exit 2 } 

config = BasicConfiguration.new
AwsContext.setup((ENV['AWS_CONTEXT'].to_sym rescue :aws))
sqs = AwsContext.instance.sqs(*config.keys)

api_version = sqs.instance_variable_get(:@api_version) || SQS::API_VERSION
if (Time.parse(api_version).to_i < Time.parse('2009-02-01').to_i)
	puts "This requires SQS API version 2009-02-01 to function. Maybe you want AWS_CONTEXT set to 'nytd' in your environment?"
	exit 1
end

begin
	url = (name.match(/^http/) ? name : sqs.list_queues(name).first)
	if url.nil? 
		puts "queue not found: #{name}"
	else
		perms = sqs.get_permissions_by_principal(url)
		if (perms.empty?)
			puts "None set."
			exit
		end
		
		puts "Permissions:"
		max_plength = perms.keys.map { |k| k.length }.max

		principals = {}
		perms.sort.each do |principal, statements|
			principals[principal.to_s] = statements.collect { |h| h['Action'].gsub(/^SQS:*/, '') }.sort.join(',')
		end

		max_alength = [ principals.values.map { |k| k.length }.max, 'Permissions'.length].max
		divider = sprintf("+-%-#{max_plength}s-+-%#{max_alength}s-+", (['-'] * max_plength).join(), (['-'] * max_alength).join())
		
		puts divider
		printf("| %-#{max_plength}s | %-#{max_alength}s |\n", 'Account ID', 'Permissions');
		puts divider
		
		principals.sort.each do |p,a|
			printf("| %-#{max_plength}s | %-#{max_alength}s |\n", p, a)
			puts divider
		end
	end
rescue
	puts "error #{$!} #{name}"
	exit 1
end

