#!/usr/bin/ruby
$:.unshift File.join(File.dirname(__FILE__))
require 'AWS/ELB'
require 'basic_configuration'
require 'aws_context'
require 'pp'

valid_protocol = "TCP|HTTP"

usage = <<"eos"
SYNOPSIS
    elb-create-lb
      LoadBalancerName --availability-zones  value[,value...] --listener 
      "protocol=value,lb-port=value,instance-port=value,[cert-id=value]"
      [ --listener "protocol=value,lb-port=value,instance-port=value,[cert-id=value]" ...]
eos

help = <<"eos"

DESCRIPTION
    Create a new LoadBalancer

ARGUMENTS
    LoadBalancerName
      Name of the LoadBalancer. You can also set this value using "--lb".
      Required.

SPECIFIC OPTIONS
    -l, --listener "protocol=value,lb-port=value,instance-port=value,[cert-id=value]" [ --listener "protocol=value,lb-port=value,instance-port=value,[cert-id=value]" ...] 
      Port and protocol configuration for the LoadBalancer. For Windows, each
      listener must be surrounded in quotes. For protocol types "SSL" and
      "HTTPS", you must specify the SSL Certificate Id with "cert-id".
      Required.

    -z, --availability-zones VALUE1,VALUE2,VALUE3...
      Availability zones configured for the LoadBalancer.
      Required.
eos

if ARGV[0] == '--help' || ARGV[0] == '-h' || ARGV[0] == '-?'
  puts usage
  puts help
  exit 0
end

if ARGV.size < 3
  puts usage
  puts 'For more information and a full list of options, run "elb-create-lb --help"'
  exit 1
end

Signal.trap("INT") do
    exit 2
end

options = {}
unless ARGV[0] =~ Regexp.new('^-')
  options[:load_balancer_name] = ARGV.shift
end

options[:listeners] = []
while ARGV.size > 0
  if ARGV[0] == '--lb'
    unless options[:load_balancer_name].nil?
      puts "LoadBalancerName is already defined"
      puts usage
      exit 1
    end
    ARGV.shift
    options[:load_balancer_name] = ARGV.shift
  end
  if ARGV[0] == '--availability-zones' || ARGV[0] == '-z'
    ARGV.shift
    options[:availability_zones] = ARGV.shift.split(',')
  end
  #--listener "protocol=value,lb-port=value,instance-port=value"
  if ARGV[0] == '--listener' || ARGV[0] == '-l'
    ARGV.shift
    l = {}
    ARGV.shift.split(',').each do |param|
      (key,value) = param.split('=')
      if key == 'protocol'
        l[:protocol] = value
      elsif key == 'lb-port'
        l[:load_balancer_port] = value
      elsif key == 'instance-port'
        l[:instance_port] = value
      else
         puts "Error: #{key} is not a valid listener parameter in #{param}"
         exit 1
      end
    end
    unless l[:protocol] =~ Regexp.new("[#{valid_protocol}]")
      puts "Error: protocol must be one of #{valid_protocol.gsub('|',', ')}"
      exit 1
    end
    options[:listeners] << l
  end
end

config = BasicConfiguration.new
elb = AwsContext.instance.elb(*config.keys)

begin
  result = elb.create_load_balancer(options)
  dns_name = result.respond_to?("d_n_s_name") ? ' '+result.d_n_s_name : ''
  puts "created #{options[:load_balancer_name]}#{dns_name}"
rescue
  puts "error: #{$!}"
  exit 1
end

exit 0
