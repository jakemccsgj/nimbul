#!/usr/bin/ruby
$:.unshift File.join(File.dirname(__FILE__))
require 'AWS/ELB'
require 'basic_configuration'
require 'aws_context'
require 'pp'

if ARGV[0] == '-?' || ARGV.size < 3 then
   puts "usage: create-load-balancer balancer-name zone1[,zone2[,...]] balancer-port-1:instance-port-1:protocol-1[,balancer-port-2:instance-port-2:protocol-2[,...]]"
   exit 1
end
options = {}
options[:load_balancer_name]=ARGV[0]

options[:availability_zones] = []
ARGV[1].split(',').each do |zone|
    options[:availability_zones] << zone
end

options[:listeners] = []
ARGV[2].split(',').each do |listener|
    m = listener.split(':')
    unless (!m[2].nil? and (m[2] == 'TCP' or m[2] == 'HTTP'))
        puts "#{m[2]} is not a valid protocol, valid protocols are: TCP HTTP"
        exit 1
    end
    options[:listeners] << {
        :load_balancer_port => m[0],
        :instance_port => m[1],
        :protocol => m[2],
    }
end

Signal.trap("INT") do
  exit 2
end

config = BasicConfiguration.new
elb = AwsContext.instance.elb(*config.keys)
begin
  result = elb.create_load_balancer(options)
  dns_name = result.respond_to?("d_n_s_name") ? ' '+result.d_n_s_name : ''
  puts "created load balancer #{options[:load_balancer_name]}#{dns_name}"
rescue
  puts "error #{$!} #{options[:load_balancer_name]}"
  exit 1
end
